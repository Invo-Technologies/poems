
/*
Our program needs to take and store data for account query // Input fields


We run the main file. We have the main file run the generation and it will be specific to the POEMS stored procedure protocol.
In the beginning, we create an app that asks the user to generate an account. When the user clicks on the generate button, the main function "generate" will do the following;
Firstly, it will run the BIP39 sequence and store the mnemonic and seed in the record file
Second, we will run an RSA to generate a public and private key and store those keys in the record file.
Third, we will use the SHA256 and make the input field the mnemonic string and the secret will be the private key from the record file.
We are going to now store the 256-bit (Y) hash that was just created.


Inside of the BlindAssetRecord there are all available functions_id (swap, transfer, exit), which we will now turn into bind_id.
Inside of the BlindAssetRecord are input variables denoted as function_ids (z1 for swap, z2 for transfer, z3 for exit), which are awaiting a bind_id. 


We will use our SHA256 (Y) in the input field as well as the seed (E), game_id, pool_id (from account query), and one function_id from 
BlindAssetRecord to create a new SHA256 per function_id. The secret to this input will be the seed (E) and each new hash will be inputted as a secret to the AleoProgram_id


Aleo will take our secret into a string field and pass that field into a struct field for each secret we pass (z1, z2, z3)
Then we will generate a private record that will generate a new BHP hash for each secret, these are now bind_ids


Our program will use the stored viewing key from the BlindAssetRecord to reveal the contents of the Aleo record and import each input variable in the BlindAssetRecord
for each function_id there is an equivalent bind_id.
*/